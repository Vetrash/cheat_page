import{_ as p,aN as t}from"./index.js";const i={},e=t("<h2>С помощью чего в JS реализуются наследование</h2><p> В JavaScript наследование реализуется с помощью прототипов. Прототипное наследование - это механизм, который позволяет объектам наследовать свойства и методы других объектов. Еще появился новый в ECMAScript 2015 с помощью ключевого слова class. </p><p> Каждый объект в JavaScript имеет внутреннюю ссылку на прототип (prototype), которая указывает на другой объект. </p><p> Существует несколько способов реализации наследования в JavaScript, рассмотрим их все. </p><p>Прототипное наследование с использованием prototype:</p><ul><li><p> Создается конструктор (функция-класс), у которого есть свойство prototype. </p></li><li><p> Создаются новые объекты с помощью этого конструктора с помощью ключевого слова new. </p></li><li><p> Прототип нового объекта устанавливается равным прототипу конструктора. </p></li></ul><p>Наследование с использованием class (введено в ECMAScript 2015):</p><ul><li><p>Используется ключевое слово class для определения класса.</p></li><li><p> Используется ключевое слово extends для указания родительского класса. </p></li><li><p> Методы родительского класса могут быть переопределены или расширены в дочернем классе с помощью ключевого слова super. </p></li></ul>",8);function r(s,a,c,l,o,n){return e}const u=p(i,[["render",r]]);export{u as default};
