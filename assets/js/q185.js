import{_ as n,o as e,b as t,F as o,d as l}from"./index.js";const s={},c=l("h2",null,"Как создать объект, не имеющий прототипа",-1),u=l("p",null," В JavaScript объекты обычно наследуют свойства и методы от своих прототипов. Однако, существует несколько способов создания объекта без прототипа: ",-1),a=l("ul",null,[l("li",null,[l("p",null," Использование Object.create(null): Метод Object.create(null) создает новый объект с указанным прототипом null, что означает, что объект не будет наследовать свойства и методы от какого-либо прототипа. ")]),l("li",null,[l("p",null," Использование литерала объекта и null в качестве прототипа: Можно создать объект, используя литерал объекта и установив его прототип в null. ")])],-1),_=l("p",null," Использование функции-конструктора без прототипа: Можно создать функцию-конструктор, которая не имеет прототипа, и создать объект с помощью этой функции. ",-1),r=l("p",null," Обратите внимание, что объекты без прототипа могут быть полезны в определенных случаях, но они также могут ограничивать функциональность и использование стандартных методов и свойств. Поэтому рекомендуется использовать объекты без прототипа с осторожностью и только в случаях, когда это действительно необходимо. ",-1);function p(i,d,h,f,m,$){return e(),t(o,null,[c,u,a,_,r],64)}const x=n(s,[["render",p]]);export{x as default};
